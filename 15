import string

# Define a function to perform the letter frequency attack
def letter_frequency_attack(ciphertext, num_plaintexts):
    # Create a dictionary to store the frequency of each letter in the ciphertext
    freq_dict = {}
    for letter in ciphertext:
        if letter in freq_dict:
            freq_dict[letter] += 1
        else:
            freq_dict[letter] = 1

    # Sort the dictionary by the frequency of each letter in descending order
    sorted_freq_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)

    # Get the most common letter in the ciphertext (assumed to be 'e')
    most_common_letter = sorted_freq_dict[0][0]

    # Calculate the key by subtracting the ASCII code of the most common letter from the ASCII code of 'e'
    key = ord('e') - ord(most_common_letter)

    # Create a list to store the possible plaintexts
    plaintexts = []

    # Decrypt the ciphertext using the key and add the resulting plaintext to the list
    plaintext = ''
    for letter in ciphertext:
        if letter in string.ascii_lowercase:
            plaintext += chr((ord(letter) - ord('a' + key)) % 26 + ord('a'))
        elif letter in string.ascii_uppercase:
            plaintext += chr((ord(letter) - ord('A' + key)) % 26 + ord('A'))
        else:
            plaintext += letter
    plaintexts.append(plaintext)

    # Generate additional possible plaintexts by trying different keys
    for i in range(1, 26):
        plaintext = ''
        for letter in ciphertext:
            if letter in string.ascii_lowercase:
                plaintext += chr((ord(letter) - ord('a' + i)) % 26 + ord('a'))
            elif letter in string.ascii_uppercase:
                plaintext += chr((ord(letter) - ord('A' + i)) % 26 + ord('A'))
            else:
                plaintext += letter
        plaintexts.append(plaintext)

    # Sort the possible plaintexts by their likelihood based on letter frequency
    sorted_plaintexts = sorted(plaintexts, key=lambda x: sum(x.count(letter) for letter in 'ETAOINSHRDLU'), reverse=True)

    # Display the specified number of top possible plaintexts
    for i in range(num_plaintexts):
        print(f"Plaintext {i+1}: {sorted_plaintexts[i]}")
