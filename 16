import string
from collections import Counter

def get_letter_frequency(ciphertext):
    # Count the frequency of each letter in the ciphertext
    frequencies = Counter(ciphertext)

    # Calculate the percentage of each letter frequency
    total_count = sum(frequencies.values())
    letter_frequency = {letter: count / total_count for letter, count in frequencies.items()}
    
    return letter_frequency

def decrypt(ciphertext, key):
    # Decrypt the ciphertext using the given key
    plaintext = ""
    for char in ciphertext:
        if char in key:
            plaintext += key[char]
        else:
            plaintext += char
    return plaintext

def get_top_plaintexts(ciphertext, num_plaintexts):
    letter_frequency = get_letter_frequency(ciphertext)

    # Sort the letters in descending order of frequency
    sorted_letters = sorted(letter_frequency.keys(), key=lambda x: letter_frequency[x], reverse=True)
    
    # Assign the most frequent letters to the corresponding English letters
    most_frequent = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
    key = {sorted_letters[i]: most_frequent[i] for i in range(len(sorted_letters))}

    # Generate the plaintexts using the key
    plaintexts = [decrypt(ciphertext, key)]

    # Generate additional possible plaintexts by swapping less frequent letters
    for i in range(1, num_plaintexts):
        new_key = key.copy()
        new_key[sorted_letters[i-1]], new_key[sorted_letters[i]] = new_key[sorted_letters[i]], new_key[sorted_letters[i-1]]
        plaintexts.append(decrypt(ciphertext, new_key))
    
    return plaintexts

def main():
    ciphertext = input("Enter the ciphertext: ")
    num_plaintexts = int(input("Enter the number of top plaintexts to generate: "))

    plaintexts = get_top_plaintexts(ciphertext.upper(), num_plaintexts)

    print(f"\nTop {num_plaintexts} possible plaintexts:")
    for i, plaintext in enumerate(plaintexts, 1):
        print(f"\nPlaintext {i}:")
        print(plaintext)

if __name__ == '__main__':
    main()
