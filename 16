import string

# Define a function to perform the letter frequency attack
def letter_frequency_attack(ciphertext, num_plaintexts):
    # Create a dictionary to store the frequency of each letter in the ciphertext
    freq_dict = {}
    for letter in ciphertext:
        if letter in freq_dict:
            freq_dict[letter] += 1
        else:
            freq_dict[letter] = 1

    # Sort the dictionary by the frequency of each letter in descending order
    sorted_freq_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)

    # Get the most common letter in the ciphertext (assumed to be 'e')
    most_common_letter = sorted_freq_dict[0][0]

    # Calculate the key by subtracting the ASCII code of the most common letter from the ASCII code of 'e'
    key = ord('e') - ord(most_common_letter)

    # Create a list to store the possible plaintexts
    plaintexts = []

    # Decrypt the ciphertext using the key and add the resulting plaintext to the list
    plaintext = ''
    for letter in ciphertext:
        if letter in string.ascii_lowercase:
            plaintext += chr((ord(letter) - ord('a' + key)) % 26 + ord('a'))
        elif letter in string.ascii_uppercase:
            plaintext += chr((ord(letter) - ord('A' + key)) % 26 + ord('A'))
        else:
            plaintext += letter
    plaintexts.append(plaintext)

    # Generate additional possible plaintexts by trying different keys
    for i in range(1, 26):
        plaintext = ''
        for letter in ciphertext:
            if letter in string.ascii_lowercase:
                plaintext += chr((ord(letter) - ord('a' + i)) % 26 + ord('a'))
            elif letter in string.ascii_uppercase:
                plaintext += chr((ord(letter) - ord('A' + i)) % 26 + ord('A'))
            else:
                plaintext += letter
        plaintexts.append(plaintext)

    # Create a list to store the possible keys
    keys = []

    # Loop through each possible plaintext and generate a key based on the letter frequency
    for plaintext in plaintexts:
        # Create a dictionary to store the frequency of each letter in the plaintext
        freq_dict = {}
        for letter in plaintext:
            if letter in freq_dict:
                freq_dict[letter] += 1
            else:
                freq_dict[letter] = 1

        # Sort the dictionary by the frequency of each letter in descending order
        sorted_freq_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)

        # Create a mapping between the most common letters in the plaintext and the most common letters in English
        mapping = {}
        for i in range(5):
            mapping[sorted_freq_dict[i][0]] = string.ascii_lowercase[i]
            mapping[sorted_freq_dict[i][0].upper()] = string.ascii_uppercase[i]

        # Generate the key based on the mapping
        key = ''
        for letter in ciphertext:
            if letter in mapping:
                key += mapping[letter]
            else:
                key += letter
        keys.append(key)

    # Create a list to store the possible plaintexts decrypted with each key
    decrypted_plaintexts = []

    # Loop through each possible key and decrypt the ciphertext
    for key in keys:
        decrypted
